apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}"
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: "{{ .Chart.Name }}"
    host: {{ template "host" . }}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "{{ .Chart.Name }}"
  template:
    metadata:
      labels:
        app: "{{ .Chart.Name }}"
        {{ .Release.Name }}-redis-client: "true"
      annotations:
        iam.amazonaws.com/role: "{{ .Values.aws.iamRole }}"
    spec:
      serviceAccountName: "{{ .Chart.Name }}"
      volumes:
      - emptyDir: {}
        name: nginxconf
      - emptyDir: {}
        name: staticfiles
      initContainers:
      - name: init-nginx
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        volumeMounts:
        - mountPath: /nginxconf
          name: nginxconf
        - mountPath: /staticfiles
          name: staticfiles
        command:
        - sh
        - -c
        - |
          cp -R /home/controlpanel/static /staticfiles && \
          cp /home/controlpanel/docker/nginx.conf /nginxconf/default.conf
      containers:
        - name: reverse-proxy
          image: "{{ .Values.reverseProxy.image.repository}}:{{ .Values.reverseProxy.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: {{ .Values.reverseProxy.port }}
          volumeMounts:
            - name: nginxconf
              mountPath: /etc/nginx/conf.d
            - name: staticfiles
              mountPath: /usr/share/nginx/html
        - name: worker
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["python3", "manage.py", "runworker", "background_tasks"]
          envFrom:
          - configMapRef:
              name: "{{ .Chart.Name }}-env-configmap"
          - secretRef:
              name: "{{ .Chart.Name }}-env-secrets"
          - secretRef:
              name: "{{ .Chart.Name }}-db-env"
        - name: backend
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          ports:
            - name: http
              containerPort: {{ .Values.django.port }}
          envFrom:
          - configMapRef:
              name: "{{ .Chart.Name }}-env-configmap"
          - secretRef:
              name: "{{ .Chart.Name }}-env-secrets"
          - secretRef:
              name: "{{ .Chart.Name }}-db-env"
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
